
gsm_bootloader_atmega328p_8Mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d6  00800100  000076a0  00000734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a0  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008002d6  008002d6  0000090a  2**0
                  ALLOC
  3 .stab         00001074  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000561  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00007000 <__vectors>:
    7000:	33 c0       	rjmp	.+102    	; 0x7068 <__ctors_end>
    7002:	00 00       	nop
    7004:	5b c1       	rjmp	.+694    	; 0x72bc <__bad_interrupt>
    7006:	00 00       	nop
    7008:	59 c1       	rjmp	.+690    	; 0x72bc <__bad_interrupt>
    700a:	00 00       	nop
    700c:	57 c1       	rjmp	.+686    	; 0x72bc <__bad_interrupt>
    700e:	00 00       	nop
    7010:	55 c1       	rjmp	.+682    	; 0x72bc <__bad_interrupt>
    7012:	00 00       	nop
    7014:	53 c1       	rjmp	.+678    	; 0x72bc <__bad_interrupt>
    7016:	00 00       	nop
    7018:	51 c1       	rjmp	.+674    	; 0x72bc <__bad_interrupt>
    701a:	00 00       	nop
    701c:	4f c1       	rjmp	.+670    	; 0x72bc <__bad_interrupt>
    701e:	00 00       	nop
    7020:	4d c1       	rjmp	.+666    	; 0x72bc <__bad_interrupt>
    7022:	00 00       	nop
    7024:	4b c1       	rjmp	.+662    	; 0x72bc <__bad_interrupt>
    7026:	00 00       	nop
    7028:	49 c1       	rjmp	.+658    	; 0x72bc <__bad_interrupt>
    702a:	00 00       	nop
    702c:	47 c1       	rjmp	.+654    	; 0x72bc <__bad_interrupt>
    702e:	00 00       	nop
    7030:	45 c1       	rjmp	.+650    	; 0x72bc <__bad_interrupt>
    7032:	00 00       	nop
    7034:	43 c1       	rjmp	.+646    	; 0x72bc <__bad_interrupt>
    7036:	00 00       	nop
    7038:	41 c1       	rjmp	.+642    	; 0x72bc <__bad_interrupt>
    703a:	00 00       	nop
    703c:	3f c1       	rjmp	.+638    	; 0x72bc <__bad_interrupt>
    703e:	00 00       	nop
    7040:	3d c1       	rjmp	.+634    	; 0x72bc <__bad_interrupt>
    7042:	00 00       	nop
    7044:	3b c1       	rjmp	.+630    	; 0x72bc <__bad_interrupt>
    7046:	00 00       	nop
    7048:	39 c1       	rjmp	.+626    	; 0x72bc <__bad_interrupt>
    704a:	00 00       	nop
    704c:	37 c1       	rjmp	.+622    	; 0x72bc <__bad_interrupt>
    704e:	00 00       	nop
    7050:	35 c1       	rjmp	.+618    	; 0x72bc <__bad_interrupt>
    7052:	00 00       	nop
    7054:	33 c1       	rjmp	.+614    	; 0x72bc <__bad_interrupt>
    7056:	00 00       	nop
    7058:	31 c1       	rjmp	.+610    	; 0x72bc <__bad_interrupt>
    705a:	00 00       	nop
    705c:	2f c1       	rjmp	.+606    	; 0x72bc <__bad_interrupt>
    705e:	00 00       	nop
    7060:	2d c1       	rjmp	.+602    	; 0x72bc <__bad_interrupt>
    7062:	00 00       	nop
    7064:	2b c1       	rjmp	.+598    	; 0x72bc <__bad_interrupt>
	...

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	12 e0       	ldi	r17, 0x02	; 2
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	e0 ea       	ldi	r30, 0xA0	; 160
    707c:	f6 e7       	ldi	r31, 0x76	; 118
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <__do_copy_data+0x10>
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0
    7084:	a6 3d       	cpi	r26, 0xD6	; 214
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <__do_copy_data+0xc>

0000708a <__do_clear_bss>:
    708a:	22 e0       	ldi	r18, 0x02	; 2
    708c:	a6 ed       	ldi	r26, 0xD6	; 214
    708e:	b2 e0       	ldi	r27, 0x02	; 2
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	aa 3d       	cpi	r26, 0xDA	; 218
    7096:	b2 07       	cpc	r27, r18
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	01 d0       	rcall	.+2      	; 0x709e <main>
    709c:	ff c2       	rjmp	.+1534   	; 0x769c <_exit>

0000709e <main>:
    709e:	cf 93       	push	r28
    70a0:	df 93       	push	r29
    70a2:	1f 92       	push	r1
    70a4:	cd b7       	in	r28, 0x3d	; 61
    70a6:	de b7       	in	r29, 0x3e	; 62
    70a8:	11 24       	eor	r1, r1
    70aa:	14 b7       	in	r17, 0x34	; 52
    70ac:	14 be       	out	0x34, r1	; 52
    70ae:	25 d1       	rcall	.+586    	; 0x72fa <uart_init>
    70b0:	8b eb       	ldi	r24, 0xBB	; 187
    70b2:	91 e0       	ldi	r25, 0x01	; 1
    70b4:	17 d1       	rcall	.+558    	; 0x72e4 <uart_puts>
    70b6:	13 ff       	sbrs	r17, 3
    70b8:	40 c0       	rjmp	.+128    	; 0x713a <main+0x9c>
    70ba:	88 e1       	ldi	r24, 0x18	; 24
    70bc:	80 93 60 00 	sts	0x0060, r24
    70c0:	10 92 60 00 	sts	0x0060, r1
    70c4:	87 ed       	ldi	r24, 0xD7	; 215
    70c6:	91 e0       	ldi	r25, 0x01	; 1
    70c8:	0d d1       	rcall	.+538    	; 0x72e4 <uart_puts>
    70ca:	82 e0       	ldi	r24, 0x02	; 2
    70cc:	90 e0       	ldi	r25, 0x00	; 0
    70ce:	b6 d2       	rcall	.+1388   	; 0x763c <eeprom_read_byte>
    70d0:	8e 3b       	cpi	r24, 0xBE	; 190
    70d2:	59 f5       	brne	.+86     	; 0x712a <main+0x8c>
    70d4:	88 ee       	ldi	r24, 0xE8	; 232
    70d6:	91 e0       	ldi	r25, 0x01	; 1
    70d8:	05 d1       	rcall	.+522    	; 0x72e4 <uart_puts>
    70da:	83 e0       	ldi	r24, 0x03	; 3
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	ae d2       	rcall	.+1372   	; 0x763c <eeprom_read_byte>
    70e0:	8e 3b       	cpi	r24, 0xBE	; 190
    70e2:	41 f4       	brne	.+16     	; 0x70f4 <main+0x56>
    70e4:	8b ef       	ldi	r24, 0xFB	; 251
    70e6:	91 e0       	ldi	r25, 0x01	; 1
    70e8:	fd d0       	rcall	.+506    	; 0x72e4 <uart_puts>
    70ea:	6f ef       	ldi	r22, 0xFF	; 255
    70ec:	83 e0       	ldi	r24, 0x03	; 3
    70ee:	90 e0       	ldi	r25, 0x00	; 0
    70f0:	ad d2       	rcall	.+1370   	; 0x764c <eeprom_write_byte>
    70f2:	1e c0       	rjmp	.+60     	; 0x7130 <main+0x92>
    70f4:	6e eb       	ldi	r22, 0xBE	; 190
    70f6:	83 e0       	ldi	r24, 0x03	; 3
    70f8:	90 e0       	ldi	r25, 0x00	; 0
    70fa:	a8 d2       	rcall	.+1360   	; 0x764c <eeprom_write_byte>
    70fc:	84 e0       	ldi	r24, 0x04	; 4
    70fe:	90 e0       	ldi	r25, 0x00	; 0
    7100:	9d d2       	rcall	.+1338   	; 0x763c <eeprom_read_byte>
    7102:	8e 3b       	cpi	r24, 0xBE	; 190
    7104:	21 f4       	brne	.+8      	; 0x710e <main+0x70>
    7106:	6f ef       	ldi	r22, 0xFF	; 255
    7108:	84 e0       	ldi	r24, 0x04	; 4
    710a:	90 e0       	ldi	r25, 0x00	; 0
    710c:	9f d2       	rcall	.+1342   	; 0x764c <eeprom_write_byte>
    710e:	8e e2       	ldi	r24, 0x2E	; 46
    7110:	92 e0       	ldi	r25, 0x02	; 2
    7112:	e8 d0       	rcall	.+464    	; 0x72e4 <uart_puts>
    7114:	84 e4       	ldi	r24, 0x44	; 68
    7116:	92 e0       	ldi	r25, 0x02	; 2
    7118:	e5 d0       	rcall	.+458    	; 0x72e4 <uart_puts>
    711a:	a1 d1       	rcall	.+834    	; 0x745e <gsm_loop>
    711c:	88 e1       	ldi	r24, 0x18	; 24
    711e:	80 93 60 00 	sts	0x0060, r24
    7122:	8e e0       	ldi	r24, 0x0E	; 14
    7124:	80 93 60 00 	sts	0x0060, r24
    7128:	30 c0       	rjmp	.+96     	; 0x718a <main+0xec>
    712a:	8f e4       	ldi	r24, 0x4F	; 79
    712c:	92 e0       	ldi	r25, 0x02	; 2
    712e:	da d0       	rcall	.+436    	; 0x72e4 <uart_puts>
    7130:	87 e1       	ldi	r24, 0x17	; 23
    7132:	92 e0       	ldi	r25, 0x02	; 2
    7134:	d7 d0       	rcall	.+430    	; 0x72e4 <uart_puts>
    7136:	1f d1       	rcall	.+574    	; 0x7376 <appStart>
    7138:	28 c0       	rjmp	.+80     	; 0x718a <main+0xec>
    713a:	12 ff       	sbrs	r17, 2
    713c:	09 c0       	rjmp	.+18     	; 0x7150 <main+0xb2>
    713e:	88 e1       	ldi	r24, 0x18	; 24
    7140:	80 93 60 00 	sts	0x0060, r24
    7144:	8e e0       	ldi	r24, 0x0E	; 14
    7146:	80 93 60 00 	sts	0x0060, r24
    714a:	86 e6       	ldi	r24, 0x66	; 102
    714c:	92 e0       	ldi	r25, 0x02	; 2
    714e:	1c c0       	rjmp	.+56     	; 0x7188 <main+0xea>
    7150:	11 ff       	sbrs	r17, 1
    7152:	0d c0       	rjmp	.+26     	; 0x716e <main+0xd0>
    7154:	88 e7       	ldi	r24, 0x78	; 120
    7156:	92 e0       	ldi	r25, 0x02	; 2
    7158:	c5 d0       	rcall	.+394    	; 0x72e4 <uart_puts>
    715a:	89 e8       	ldi	r24, 0x89	; 137
    715c:	92 e0       	ldi	r25, 0x02	; 2
    715e:	c2 d0       	rcall	.+388    	; 0x72e4 <uart_puts>
    7160:	88 e1       	ldi	r24, 0x18	; 24
    7162:	80 93 60 00 	sts	0x0060, r24
    7166:	10 92 60 00 	sts	0x0060, r1
    716a:	79 d1       	rcall	.+754    	; 0x745e <gsm_loop>
    716c:	0e c0       	rjmp	.+28     	; 0x718a <main+0xec>
    716e:	88 e1       	ldi	r24, 0x18	; 24
    7170:	80 93 60 00 	sts	0x0060, r24
    7174:	8e e0       	ldi	r24, 0x0E	; 14
    7176:	80 93 60 00 	sts	0x0060, r24
    717a:	10 ff       	sbrs	r17, 0
    717c:	03 c0       	rjmp	.+6      	; 0x7184 <main+0xe6>
    717e:	88 e9       	ldi	r24, 0x98	; 152
    7180:	92 e0       	ldi	r25, 0x02	; 2
    7182:	02 c0       	rjmp	.+4      	; 0x7188 <main+0xea>
    7184:	86 ea       	ldi	r24, 0xA6	; 166
    7186:	92 e0       	ldi	r25, 0x02	; 2
    7188:	ad d0       	rcall	.+346    	; 0x72e4 <uart_puts>
    718a:	89 eb       	ldi	r24, 0xB9	; 185
    718c:	92 e0       	ldi	r25, 0x02	; 2
    718e:	aa d0       	rcall	.+340    	; 0x72e4 <uart_puts>
    7190:	61 2c       	mov	r6, r1
    7192:	71 2c       	mov	r7, r1
    7194:	18 e1       	ldi	r17, 0x18	; 24
    7196:	08 e0       	ldi	r16, 0x08	; 8
    7198:	23 e0       	ldi	r18, 0x03	; 3
    719a:	f2 2e       	mov	r15, r18
    719c:	ee 24       	eor	r14, r14
    719e:	e3 94       	inc	r14
    71a0:	35 e0       	ldi	r19, 0x05	; 5
    71a2:	d3 2e       	mov	r13, r19
    71a4:	41 e1       	ldi	r20, 0x11	; 17
    71a6:	c4 2e       	mov	r12, r20
    71a8:	8a d0       	rcall	.+276    	; 0x72be <getch>
    71aa:	81 34       	cpi	r24, 0x41	; 65
    71ac:	79 f4       	brne	.+30     	; 0x71cc <main+0x12e>
    71ae:	87 d0       	rcall	.+270    	; 0x72be <getch>
    71b0:	89 83       	std	Y+1, r24	; 0x01
    71b2:	b0 d0       	rcall	.+352    	; 0x7314 <verifySpace>
    71b4:	89 81       	ldd	r24, Y+1	; 0x01
    71b6:	82 38       	cpi	r24, 0x82	; 130
    71b8:	11 f4       	brne	.+4      	; 0x71be <main+0x120>
    71ba:	82 e0       	ldi	r24, 0x02	; 2
    71bc:	03 c0       	rjmp	.+6      	; 0x71c4 <main+0x126>
    71be:	81 38       	cpi	r24, 0x81	; 129
    71c0:	19 f4       	brne	.+6      	; 0x71c8 <main+0x12a>
    71c2:	86 e0       	ldi	r24, 0x06	; 6
    71c4:	88 d0       	rcall	.+272    	; 0x72d6 <putch>
    71c6:	77 c0       	rjmp	.+238    	; 0x72b6 <main+0x218>
    71c8:	83 e0       	ldi	r24, 0x03	; 3
    71ca:	fc cf       	rjmp	.-8      	; 0x71c4 <main+0x126>
    71cc:	82 34       	cpi	r24, 0x42	; 66
    71ce:	11 f4       	brne	.+4      	; 0x71d4 <main+0x136>
    71d0:	84 e1       	ldi	r24, 0x14	; 20
    71d2:	03 c0       	rjmp	.+6      	; 0x71da <main+0x13c>
    71d4:	85 34       	cpi	r24, 0x45	; 69
    71d6:	19 f4       	brne	.+6      	; 0x71de <main+0x140>
    71d8:	85 e0       	ldi	r24, 0x05	; 5
    71da:	9f d0       	rcall	.+318    	; 0x731a <getNch>
    71dc:	6c c0       	rjmp	.+216    	; 0x72b6 <main+0x218>
    71de:	85 35       	cpi	r24, 0x55	; 85
    71e0:	59 f4       	brne	.+22     	; 0x71f8 <main+0x15a>
    71e2:	6d d0       	rcall	.+218    	; 0x72be <getch>
    71e4:	b8 2e       	mov	r11, r24
    71e6:	6b d0       	rcall	.+214    	; 0x72be <getch>
    71e8:	2b 2d       	mov	r18, r11
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	a9 01       	movw	r20, r18
    71ee:	58 2b       	or	r21, r24
    71f0:	3a 01       	movw	r6, r20
    71f2:	66 0c       	add	r6, r6
    71f4:	77 1c       	adc	r7, r7
    71f6:	5e c0       	rjmp	.+188    	; 0x72b4 <main+0x216>
    71f8:	86 35       	cpi	r24, 0x56	; 86
    71fa:	21 f4       	brne	.+8      	; 0x7204 <main+0x166>
    71fc:	84 e0       	ldi	r24, 0x04	; 4
    71fe:	8d d0       	rcall	.+282    	; 0x731a <getNch>
    7200:	80 e0       	ldi	r24, 0x00	; 0
    7202:	e0 cf       	rjmp	.-64     	; 0x71c4 <main+0x126>
    7204:	84 36       	cpi	r24, 0x64	; 100
    7206:	09 f0       	breq	.+2      	; 0x720a <main+0x16c>
    7208:	36 c0       	rjmp	.+108    	; 0x7276 <main+0x1d8>
    720a:	59 d0       	rcall	.+178    	; 0x72be <getch>
    720c:	58 d0       	rcall	.+176    	; 0x72be <getch>
    720e:	b8 2e       	mov	r11, r24
    7210:	56 d0       	rcall	.+172    	; 0x72be <getch>
    7212:	a8 2e       	mov	r10, r24
    7214:	81 2c       	mov	r8, r1
    7216:	99 24       	eor	r9, r9
    7218:	93 94       	inc	r9
    721a:	51 d0       	rcall	.+162    	; 0x72be <getch>
    721c:	f4 01       	movw	r30, r8
    721e:	81 93       	st	Z+, r24
    7220:	4f 01       	movw	r8, r30
    7222:	be 12       	cpse	r11, r30
    7224:	fa cf       	rjmp	.-12     	; 0x721a <main+0x17c>
    7226:	76 d0       	rcall	.+236    	; 0x7314 <verifySpace>
    7228:	f5 e4       	ldi	r31, 0x45	; 69
    722a:	af 12       	cpse	r10, r31
    722c:	01 c0       	rjmp	.+2      	; 0x7230 <main+0x192>
    722e:	ff cf       	rjmp	.-2      	; 0x722e <main+0x190>
    7230:	f3 01       	movw	r30, r6
    7232:	f7 be       	out	0x37, r15	; 55
    7234:	e8 95       	spm
    7236:	07 b6       	in	r0, 0x37	; 55
    7238:	00 fc       	sbrc	r0, 0
    723a:	fd cf       	rjmp	.-6      	; 0x7236 <main+0x198>
    723c:	a3 01       	movw	r20, r6
    723e:	a0 e0       	ldi	r26, 0x00	; 0
    7240:	b1 e0       	ldi	r27, 0x01	; 1
    7242:	2c 91       	ld	r18, X
    7244:	12 96       	adiw	r26, 0x02	; 2
    7246:	cd 01       	movw	r24, r26
    7248:	01 97       	sbiw	r24, 0x01	; 1
    724a:	fc 01       	movw	r30, r24
    724c:	80 81       	ld	r24, Z
    724e:	30 e0       	ldi	r19, 0x00	; 0
    7250:	38 2b       	or	r19, r24
    7252:	fa 01       	movw	r30, r20
    7254:	09 01       	movw	r0, r18
    7256:	e7 be       	out	0x37, r14	; 55
    7258:	e8 95       	spm
    725a:	11 24       	eor	r1, r1
    725c:	4e 5f       	subi	r20, 0xFE	; 254
    725e:	5f 4f       	sbci	r21, 0xFF	; 255
    7260:	ba 12       	cpse	r11, r26
    7262:	ef cf       	rjmp	.-34     	; 0x7242 <main+0x1a4>
    7264:	f3 01       	movw	r30, r6
    7266:	d7 be       	out	0x37, r13	; 55
    7268:	e8 95       	spm
    726a:	07 b6       	in	r0, 0x37	; 55
    726c:	00 fc       	sbrc	r0, 0
    726e:	fd cf       	rjmp	.-6      	; 0x726a <main+0x1cc>
    7270:	c7 be       	out	0x37, r12	; 55
    7272:	e8 95       	spm
    7274:	20 c0       	rjmp	.+64     	; 0x72b6 <main+0x218>
    7276:	84 37       	cpi	r24, 0x74	; 116
    7278:	71 f4       	brne	.+28     	; 0x7296 <main+0x1f8>
    727a:	21 d0       	rcall	.+66     	; 0x72be <getch>
    727c:	20 d0       	rcall	.+64     	; 0x72be <getch>
    727e:	b8 2e       	mov	r11, r24
    7280:	1e d0       	rcall	.+60     	; 0x72be <getch>
    7282:	48 d0       	rcall	.+144    	; 0x7314 <verifySpace>
    7284:	43 01       	movw	r8, r6
    7286:	f4 01       	movw	r30, r8
    7288:	85 91       	lpm	r24, Z+
    728a:	4f 01       	movw	r8, r30
    728c:	24 d0       	rcall	.+72     	; 0x72d6 <putch>
    728e:	ba 94       	dec	r11
    7290:	b1 10       	cpse	r11, r1
    7292:	f9 cf       	rjmp	.-14     	; 0x7286 <main+0x1e8>
    7294:	10 c0       	rjmp	.+32     	; 0x72b6 <main+0x218>
    7296:	85 37       	cpi	r24, 0x75	; 117
    7298:	39 f4       	brne	.+14     	; 0x72a8 <main+0x20a>
    729a:	3c d0       	rcall	.+120    	; 0x7314 <verifySpace>
    729c:	8e e1       	ldi	r24, 0x1E	; 30
    729e:	1b d0       	rcall	.+54     	; 0x72d6 <putch>
    72a0:	85 e9       	ldi	r24, 0x95	; 149
    72a2:	19 d0       	rcall	.+50     	; 0x72d6 <putch>
    72a4:	8f e0       	ldi	r24, 0x0F	; 15
    72a6:	8e cf       	rjmp	.-228    	; 0x71c4 <main+0x126>
    72a8:	81 35       	cpi	r24, 0x51	; 81
    72aa:	21 f4       	brne	.+8      	; 0x72b4 <main+0x216>
    72ac:	10 93 60 00 	sts	0x0060, r17
    72b0:	00 93 60 00 	sts	0x0060, r16
    72b4:	2f d0       	rcall	.+94     	; 0x7314 <verifySpace>
    72b6:	80 e1       	ldi	r24, 0x10	; 16
    72b8:	0e d0       	rcall	.+28     	; 0x72d6 <putch>
    72ba:	76 cf       	rjmp	.-276    	; 0x71a8 <main+0x10a>

000072bc <__bad_interrupt>:
    72bc:	a1 ce       	rjmp	.-702    	; 0x7000 <__vectors>

000072be <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    72be:	80 91 c0 00 	lds	r24, 0x00C0
    72c2:	87 ff       	sbrs	r24, 7
    72c4:	fc cf       	rjmp	.-8      	; 0x72be <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    72c6:	80 91 c0 00 	lds	r24, 0x00C0
    72ca:	84 fd       	sbrc	r24, 4
    72cc:	01 c0       	rjmp	.+2      	; 0x72d0 <getch+0x12>
	watchdogConfig(WATCHDOG_OFF);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    72ce:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    72d0:	80 91 c6 00 	lds	r24, 0x00C6
    LED_PIN |= _BV(LED);
  #endif
#endif

  return ch;
}
    72d4:	08 95       	ret

000072d6 <putch>:
#endif
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    72d6:	90 91 c0 00 	lds	r25, 0x00C0
    72da:	95 ff       	sbrs	r25, 5
    72dc:	fc cf       	rjmp	.-8      	; 0x72d6 <putch>
  UART_UDR = ch;
    72de:	80 93 c6 00 	sts	0x00C6, r24
    72e2:	08 95       	ret

000072e4 <uart_puts>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

uint8_t uart_puts(const char * buf){
    72e4:	cf 93       	push	r28
    72e6:	df 93       	push	r29
    72e8:	ec 01       	movw	r28, r24
  while (*buf) {
    72ea:	89 91       	ld	r24, Y+
    72ec:	88 23       	and	r24, r24
    72ee:	11 f0       	breq	.+4      	; 0x72f4 <uart_puts+0x10>
    putch(*buf++);
    72f0:	f2 df       	rcall	.-28     	; 0x72d6 <putch>
    72f2:	fb cf       	rjmp	.-10     	; 0x72ea <uart_puts+0x6>
  }
}
    72f4:	df 91       	pop	r29
    72f6:	cf 91       	pop	r28
    72f8:	08 95       	ret

000072fa <uart_init>:
	  UCSRA = _BV(U2X); //Double speed mode USART
	  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
	  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
	  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
	#else
	  UART_SRA = _BV(U2X0); //Double speed mode USART0
    72fa:	82 e0       	ldi	r24, 0x02	; 2
    72fc:	80 93 c0 00 	sts	0x00C0, r24
	  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7300:	88 e1       	ldi	r24, 0x18	; 24
    7302:	80 93 c1 00 	sts	0x00C1, r24
	  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7306:	86 e0       	ldi	r24, 0x06	; 6
    7308:	80 93 c2 00 	sts	0x00C2, r24
	  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    730c:	88 e0       	ldi	r24, 0x08	; 8
    730e:	80 93 c4 00 	sts	0x00C4, r24
    7312:	08 95       	ret

00007314 <verifySpace>:
    putch(STK_OK);
  }
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7314:	d4 df       	rcall	.-88     	; 0x72be <getch>
    // watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    // while (1)			      // and busy-loop so that WD causes
    //   ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7316:	84 e1       	ldi	r24, 0x14	; 20
    7318:	de cf       	rjmp	.-68     	; 0x72d6 <putch>

0000731a <getNch>:
void __attribute__((noinline)) verifySpace();
void __attribute__((noinline)) watchdogConfig(uint8_t x);


static inline void getNch(uint8_t);
void getNch(uint8_t count) {
    731a:	cf 93       	push	r28
    731c:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    731e:	cf df       	rcall	.-98     	; 0x72be <getch>
    7320:	c1 50       	subi	r28, 0x01	; 1
    7322:	e9 f7       	brne	.-6      	; 0x731e <getNch+0x4>
  verifySpace();
}
    7324:	cf 91       	pop	r28


static inline void getNch(uint8_t);
void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7326:	f6 cf       	rjmp	.-20     	; 0x7314 <verifySpace>

00007328 <elapsed_seconds>:
	TCCR1B |= 1<<CS10 | 1<<CS12;
	TCNT1 = 0; //15625
}

unsigned long elapsed_seconds(){
	if(TCNT1 > F_CPU / 1024){
    7328:	80 91 84 00 	lds	r24, 0x0084
    732c:	90 91 85 00 	lds	r25, 0x0085
    7330:	85 38       	cpi	r24, 0x85	; 133
    7332:	9e 41       	sbci	r25, 0x1E	; 30
    7334:	b8 f0       	brcs	.+46     	; 0x7364 <elapsed_seconds+0x3c>
		g_seconds = g_seconds + 1;
    7336:	80 91 d6 02 	lds	r24, 0x02D6
    733a:	90 91 d7 02 	lds	r25, 0x02D7
    733e:	a0 91 d8 02 	lds	r26, 0x02D8
    7342:	b0 91 d9 02 	lds	r27, 0x02D9
    7346:	01 96       	adiw	r24, 0x01	; 1
    7348:	a1 1d       	adc	r26, r1
    734a:	b1 1d       	adc	r27, r1
    734c:	80 93 d6 02 	sts	0x02D6, r24
    7350:	90 93 d7 02 	sts	0x02D7, r25
    7354:	a0 93 d8 02 	sts	0x02D8, r26
    7358:	b0 93 d9 02 	sts	0x02D9, r27
		TCNT1 = 0;
    735c:	10 92 85 00 	sts	0x0085, r1
    7360:	10 92 84 00 	sts	0x0084, r1
	}
	return g_seconds;
    7364:	60 91 d6 02 	lds	r22, 0x02D6
    7368:	70 91 d7 02 	lds	r23, 0x02D7
    736c:	80 91 d8 02 	lds	r24, 0x02D8
    7370:	90 91 d9 02 	lds	r25, 0x02D9
}
    7374:	08 95       	ret

00007376 <appStart>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x){
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7376:	e0 e6       	ldi	r30, 0x60	; 96
    7378:	f0 e0       	ldi	r31, 0x00	; 0
    737a:	88 e1       	ldi	r24, 0x18	; 24
    737c:	80 83       	st	Z, r24
	WDTCSR = x;
    737e:	10 82       	st	Z, r1
	return(0);  //never reached 
}

void appStart(void) {
    watchdogDisable();
    asm volatile(
    7380:	ee 27       	eor	r30, r30
    7382:	ff 27       	eor	r31, r31
    7384:	09 94       	ijmp

00007386 <send_at_command>:
	  }
  }
  return ans;
}

uint8_t send_at_command(char * ATcommand, char * expected_resp, unsigned long timeout){
    7386:	4f 92       	push	r4
    7388:	5f 92       	push	r5
    738a:	6f 92       	push	r6
    738c:	7f 92       	push	r7
    738e:	8f 92       	push	r8
    7390:	9f 92       	push	r9
    7392:	af 92       	push	r10
    7394:	bf 92       	push	r11
    7396:	cf 92       	push	r12
    7398:	df 92       	push	r13
    739a:	ef 92       	push	r14
    739c:	ff 92       	push	r15
    739e:	0f 93       	push	r16
    73a0:	1f 93       	push	r17
    73a2:	cf 93       	push	r28
    73a4:	df 93       	push	r29
    73a6:	cd b7       	in	r28, 0x3d	; 61
    73a8:	de b7       	in	r29, 0x3e	; 62
    73aa:	a0 97       	sbiw	r28, 0x20	; 32
    73ac:	de bf       	out	0x3e, r29	; 62
    73ae:	cd bf       	out	0x3d, r28	; 61
    73b0:	4c 01       	movw	r8, r24
    73b2:	5b 01       	movw	r10, r22
    73b4:	69 01       	movw	r12, r18
    73b6:	7a 01       	movw	r14, r20
	uint8_t x=0;
	uint8_t answer = NOT_OK;
	char response[SIZE_RESPONSE];
	memset(response,'\0',SIZE_RESPONSE);
    73b8:	8e 01       	movw	r16, r28
    73ba:	0f 5f       	subi	r16, 0xFF	; 255
    73bc:	1f 4f       	sbci	r17, 0xFF	; 255
    73be:	80 e2       	ldi	r24, 0x20	; 32
    73c0:	f8 01       	movw	r30, r16
    73c2:	11 92       	st	Z+, r1
    73c4:	8a 95       	dec	r24
    73c6:	e9 f7       	brne	.-6      	; 0x73c2 <send_at_command+0x3c>
	unsigned long start_time = elapsed_seconds();
    73c8:	af df       	rcall	.-162    	; 0x7328 <elapsed_seconds>
    73ca:	2b 01       	movw	r4, r22
    73cc:	3c 01       	movw	r6, r24
	 
	uart_puts(ATcommand);    // Send the AT command
    73ce:	c4 01       	movw	r24, r8
    73d0:	89 df       	rcall	.-238    	; 0x72e4 <uart_puts>
  }
  return ans;
}

uint8_t send_at_command(char * ATcommand, char * expected_resp, unsigned long timeout){
	uint8_t x=0;
    73d2:	91 2c       	mov	r9, r1
    putch(*buf++);
  }
}

int get_non_blocking_ch(){
  if(UART_SRA & _BV(RXC0)){
    73d4:	80 91 c0 00 	lds	r24, 0x00C0
    73d8:	87 ff       	sbrs	r24, 7
    73da:	1f c0       	rjmp	.+62     	; 0x741a <send_at_command+0x94>
    if (!(UART_SRA & _BV(FE0))) {
    73dc:	80 91 c0 00 	lds	r24, 0x00C0
    73e0:	84 fd       	sbrc	r24, 4
    73e2:	01 c0       	rjmp	.+2      	; 0x73e6 <send_at_command+0x60>
	watchdogConfig(WATCHDOG_OFF);
}

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    73e4:	a8 95       	wdr
         * the application "soon", if it keeps happening.  (Note that we
         * don't care that an invalid char is returned...)
         */
      watchdogReset();
    }
    return(UART_UDR);
    73e6:	80 91 c6 00 	lds	r24, 0x00C6
	uart_puts(ATcommand);    // Send the AT command
	do{                      // this loop waits for the answer until timeouts
		int ch = get_non_blocking_ch();
		if(ch > -1){
			char c = (char)ch;
			response[x] = c;
    73ea:	49 2d       	mov	r20, r9
    73ec:	50 e0       	ldi	r21, 0x00	; 0
    73ee:	f8 01       	movw	r30, r16
    73f0:	e4 0f       	add	r30, r20
    73f2:	f5 1f       	adc	r31, r21
    73f4:	80 83       	st	Z, r24
			x = ((x+1) % SIZE_RESPONSE);
    73f6:	4f 5f       	subi	r20, 0xFF	; 255
    73f8:	5f 4f       	sbci	r21, 0xFF	; 255
    73fa:	f4 2f       	mov	r31, r20
    73fc:	ff 71       	andi	r31, 0x1F	; 31
    73fe:	9f 2e       	mov	r9, r31
			if(strstr(response, expected_resp)){
    7400:	b5 01       	movw	r22, r10
    7402:	c8 01       	movw	r24, r16
    7404:	31 d1       	rcall	.+610    	; 0x7668 <strstr>
    7406:	89 2b       	or	r24, r25
    7408:	a9 f4       	brne	.+42     	; 0x7434 <send_at_command+0xae>
				answer = OK;
				return answer;
			}
			else if(strstr(response, "ERROR")){
    740a:	68 e7       	ldi	r22, 0x78	; 120
    740c:	71 e0       	ldi	r23, 0x01	; 1
    740e:	c8 01       	movw	r24, r16
    7410:	2b d1       	rcall	.+598    	; 0x7668 <strstr>
    7412:	89 2b       	or	r24, r25
    7414:	11 f0       	breq	.+4      	; 0x741a <send_at_command+0x94>
				answer = NOT_OK;
				return answer;
    7416:	80 e0       	ldi	r24, 0x00	; 0
    7418:	0e c0       	rjmp	.+28     	; 0x7436 <send_at_command+0xb0>
			}
		}
	}
	while(((unsigned long)(elapsed_seconds() - start_time) < timeout) || answer); 
    741a:	86 df       	rcall	.-244    	; 0x7328 <elapsed_seconds>
    741c:	dc 01       	movw	r26, r24
    741e:	cb 01       	movw	r24, r22
    7420:	84 19       	sub	r24, r4
    7422:	95 09       	sbc	r25, r5
    7424:	a6 09       	sbc	r26, r6
    7426:	b7 09       	sbc	r27, r7
    7428:	8c 15       	cp	r24, r12
    742a:	9d 05       	cpc	r25, r13
    742c:	ae 05       	cpc	r26, r14
    742e:	bf 05       	cpc	r27, r15
    7430:	88 f2       	brcs	.-94     	; 0x73d4 <send_at_command+0x4e>
    7432:	f1 cf       	rjmp	.-30     	; 0x7416 <send_at_command+0x90>
			char c = (char)ch;
			response[x] = c;
			x = ((x+1) % SIZE_RESPONSE);
			if(strstr(response, expected_resp)){
				answer = OK;
				return answer;
    7434:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	while(((unsigned long)(elapsed_seconds() - start_time) < timeout) || answer); 
	return answer;	
}
    7436:	a0 96       	adiw	r28, 0x20	; 32
    7438:	de bf       	out	0x3e, r29	; 62
    743a:	cd bf       	out	0x3d, r28	; 61
    743c:	df 91       	pop	r29
    743e:	cf 91       	pop	r28
    7440:	1f 91       	pop	r17
    7442:	0f 91       	pop	r16
    7444:	ff 90       	pop	r15
    7446:	ef 90       	pop	r14
    7448:	df 90       	pop	r13
    744a:	cf 90       	pop	r12
    744c:	bf 90       	pop	r11
    744e:	af 90       	pop	r10
    7450:	9f 90       	pop	r9
    7452:	8f 90       	pop	r8
    7454:	7f 90       	pop	r7
    7456:	6f 90       	pop	r6
    7458:	5f 90       	pop	r5
    745a:	4f 90       	pop	r4
    745c:	08 95       	ret

0000745e <gsm_loop>:
	uint8_t port_pin	 	= eeprom_read_byte(GSM_REG_PIN_ADDR);
	uint8_t high_level	 	= eeprom_read_byte(GSM_REG_PIN_ON_LOGIC_ADDR);
	change_pin_state(port_addr, port_pin, !high_level);		
}

uint8_t gsm_loop(void){
    745e:	ef 92       	push	r14
    7460:	ff 92       	push	r15
    7462:	0f 93       	push	r16
    7464:	1f 93       	push	r17
    7466:	cf 93       	push	r28
    7468:	df 93       	push	r29
    }
}


void init_millis(){
	TCCR1B |= 1<<CS10 | 1<<CS12;
    746a:	80 91 81 00 	lds	r24, 0x0081
    746e:	85 60       	ori	r24, 0x05	; 5
    7470:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0; //15625
    7474:	10 92 85 00 	sts	0x0085, r1
    7478:	10 92 84 00 	sts	0x0084, r1
}

uint8_t gsm_loop(void){
	init_millis();
	uint8_t ret_val = NOT_OK;
	uint8_t gsm_state = INITIAL;
    747c:	c0 e0       	ldi	r28, 0x00	; 0
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.


void change_pin_state(uint8_t *port, uint8_t pin, uint8_t value){
    unsigned char * ddr = port - 1;
    *ddr |= (1 << pin);
    747e:	01 e0       	ldi	r16, 0x01	; 1
    7480:	10 e0       	ldi	r17, 0x00	; 0

uint8_t gsm_loop(void){
	init_millis();
	uint8_t ret_val = NOT_OK;
	uint8_t gsm_state = INITIAL;
	while(gsm_state != IDLE){
    7482:	c9 30       	cpi	r28, 0x09	; 9
    7484:	09 f4       	brne	.+2      	; 0x7488 <gsm_loop+0x2a>
    7486:	cf c0       	rjmp	.+414    	; 0x7626 <gsm_loop+0x1c8>
    7488:	a8 95       	wdr
		watchdogReset();
		switch(gsm_state){
    748a:	c4 30       	cpi	r28, 0x04	; 4
    748c:	09 f4       	brne	.+2      	; 0x7490 <gsm_loop+0x32>
    748e:	6e c0       	rjmp	.+220    	; 0x756c <gsm_loop+0x10e>
    7490:	90 f4       	brcc	.+36     	; 0x74b6 <gsm_loop+0x58>
    7492:	c1 30       	cpi	r28, 0x01	; 1
    7494:	09 f4       	brne	.+2      	; 0x7498 <gsm_loop+0x3a>
    7496:	42 c0       	rjmp	.+132    	; 0x751c <gsm_loop+0xbe>
    7498:	d0 f0       	brcs	.+52     	; 0x74ce <gsm_loop+0x70>
    749a:	c2 30       	cpi	r28, 0x02	; 2
    749c:	09 f4       	brne	.+2      	; 0x74a0 <gsm_loop+0x42>
    749e:	4c c0       	rjmp	.+152    	; 0x7538 <gsm_loop+0xda>
    74a0:	c3 30       	cpi	r28, 0x03	; 3
    74a2:	79 f7       	brne	.-34     	; 0x7482 <gsm_loop+0x24>
				_delay_ms(1000);
				break;
			}

			case CHECK_SIGNAL:{
				if(send_at_command(AT_CHECK_SIGNAL, "OK", 2)){
    74a4:	22 e0       	ldi	r18, 0x02	; 2
    74a6:	30 e0       	ldi	r19, 0x00	; 0
    74a8:	40 e0       	ldi	r20, 0x00	; 0
    74aa:	50 e0       	ldi	r21, 0x00	; 0
    74ac:	68 eb       	ldi	r22, 0xB8	; 184
    74ae:	71 e0       	ldi	r23, 0x01	; 1
    74b0:	8e e4       	ldi	r24, 0x4E	; 78
    74b2:	91 e0       	ldi	r25, 0x01	; 1
    74b4:	49 c0       	rjmp	.+146    	; 0x7548 <gsm_loop+0xea>
	init_millis();
	uint8_t ret_val = NOT_OK;
	uint8_t gsm_state = INITIAL;
	while(gsm_state != IDLE){
		watchdogReset();
		switch(gsm_state){
    74b6:	c6 30       	cpi	r28, 0x06	; 6
    74b8:	09 f4       	brne	.+2      	; 0x74bc <gsm_loop+0x5e>
    74ba:	65 c0       	rjmp	.+202    	; 0x7586 <gsm_loop+0x128>
    74bc:	08 f4       	brcc	.+2      	; 0x74c0 <gsm_loop+0x62>
    74be:	49 c0       	rjmp	.+146    	; 0x7552 <gsm_loop+0xf4>
    74c0:	c7 30       	cpi	r28, 0x07	; 7
    74c2:	09 f4       	brne	.+2      	; 0x74c6 <gsm_loop+0x68>
    74c4:	69 c0       	rjmp	.+210    	; 0x7598 <gsm_loop+0x13a>
    74c6:	c8 30       	cpi	r28, 0x08	; 8
    74c8:	09 f4       	brne	.+2      	; 0x74cc <gsm_loop+0x6e>
    74ca:	7b c0       	rjmp	.+246    	; 0x75c2 <gsm_loop+0x164>
    74cc:	da cf       	rjmp	.-76     	; 0x7482 <gsm_loop+0x24>
	while(((unsigned long)(elapsed_seconds() - start_time) < timeout) || answer); 
	return answer;	
}

void turn_modem_on(void){
	uint8_t * port_addr 	= eeprom_read_byte(GSM_REG_PORT_ADDR);
    74ce:	85 e0       	ldi	r24, 0x05	; 5
    74d0:	90 e0       	ldi	r25, 0x00	; 0
    74d2:	b4 d0       	rcall	.+360    	; 0x763c <eeprom_read_byte>
    74d4:	ec 01       	movw	r28, r24
	uint8_t port_pin	 	= eeprom_read_byte(GSM_REG_PIN_ADDR);
    74d6:	86 e0       	ldi	r24, 0x06	; 6
    74d8:	90 e0       	ldi	r25, 0x00	; 0
    74da:	b0 d0       	rcall	.+352    	; 0x763c <eeprom_read_byte>
    74dc:	7c 01       	movw	r14, r24
	uint8_t high_level	 	= eeprom_read_byte(GSM_REG_PIN_ON_LOGIC_ADDR);
    74de:	87 e0       	ldi	r24, 0x07	; 7
    74e0:	90 e0       	ldi	r25, 0x00	; 0
    74e2:	ac d0       	rcall	.+344    	; 0x763c <eeprom_read_byte>
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.


void change_pin_state(uint8_t *port, uint8_t pin, uint8_t value){
    unsigned char * ddr = port - 1;
    *ddr |= (1 << pin);
    74e4:	98 01       	movw	r18, r16
    74e6:	01 c0       	rjmp	.+2      	; 0x74ea <gsm_loop+0x8c>
    74e8:	22 0f       	add	r18, r18
    74ea:	ea 94       	dec	r14
    74ec:	ea f7       	brpl	.-6      	; 0x74e8 <gsm_loop+0x8a>
    74ee:	fe 01       	movw	r30, r28
    74f0:	92 91       	ld	r25, -Z
    74f2:	92 2b       	or	r25, r18
    74f4:	90 83       	st	Z, r25
    74f6:	98 81       	ld	r25, Y
    if(value){
    74f8:	88 23       	and	r24, r24
    74fa:	11 f0       	breq	.+4      	; 0x7500 <gsm_loop+0xa2>
      *port |= (1 << pin);//make pin 13 high and power on the led
    74fc:	29 2b       	or	r18, r25
    74fe:	02 c0       	rjmp	.+4      	; 0x7504 <gsm_loop+0xa6>
    }
    else{
      *port &= ~(1 <<pin);//make pin 13 low and power off the led
    7500:	20 95       	com	r18
    7502:	29 23       	and	r18, r25
    7504:	28 83       	st	Y, r18
	while(gsm_state != IDLE){
		watchdogReset();
		switch(gsm_state){
			case INITIAL:{
				turn_modem_on();
				send_at_command(TCP_CLOSE, "OK", 2);
    7506:	22 e0       	ldi	r18, 0x02	; 2
    7508:	30 e0       	ldi	r19, 0x00	; 0
    750a:	40 e0       	ldi	r20, 0x00	; 0
    750c:	50 e0       	ldi	r21, 0x00	; 0
    750e:	68 eb       	ldi	r22, 0xB8	; 184
    7510:	71 e0       	ldi	r23, 0x01	; 1
    7512:	89 e6       	ldi	r24, 0x69	; 105
    7514:	91 e0       	ldi	r25, 0x01	; 1
    7516:	37 df       	rcall	.-402    	; 0x7386 <send_at_command>
				gsm_state = CHECK_PIN;
    7518:	c1 e0       	ldi	r28, 0x01	; 1
    751a:	b6 cf       	rjmp	.-148    	; 0x7488 <gsm_loop+0x2a>
				break;
			}

			case CHECK_PIN:{
				if(send_at_command(AT_CHECK_PIN, "+CPIN: READY", 2)){
    751c:	22 e0       	ldi	r18, 0x02	; 2
    751e:	30 e0       	ldi	r19, 0x00	; 0
    7520:	40 e0       	ldi	r20, 0x00	; 0
    7522:	50 e0       	ldi	r21, 0x00	; 0
    7524:	6e e7       	ldi	r22, 0x7E	; 126
    7526:	71 e0       	ldi	r23, 0x01	; 1
    7528:	8e e5       	ldi	r24, 0x5E	; 94
    752a:	91 e0       	ldi	r25, 0x01	; 1
    752c:	2c df       	rcall	.-424    	; 0x7386 <send_at_command>
    752e:	88 23       	and	r24, r24
    7530:	09 f4       	brne	.+2      	; 0x7534 <gsm_loop+0xd6>
    7532:	3d c0       	rjmp	.+122    	; 0x75ae <gsm_loop+0x150>
					gsm_state = TURN_OFF_ECHO;
    7534:	c2 e0       	ldi	r28, 0x02	; 2
    7536:	3b c0       	rjmp	.+118    	; 0x75ae <gsm_loop+0x150>
				_delay_ms(1000);
				break;
			}

			case TURN_OFF_ECHO:{
				if(send_at_command(AT_ECHO_OFF, "OK", 2)){
    7538:	22 e0       	ldi	r18, 0x02	; 2
    753a:	30 e0       	ldi	r19, 0x00	; 0
    753c:	40 e0       	ldi	r20, 0x00	; 0
    753e:	50 e0       	ldi	r21, 0x00	; 0
    7540:	68 eb       	ldi	r22, 0xB8	; 184
    7542:	71 e0       	ldi	r23, 0x01	; 1
    7544:	87 e5       	ldi	r24, 0x57	; 87
    7546:	91 e0       	ldi	r25, 0x01	; 1
				_delay_ms(1000);
				break;
			}

			case CHECK_SIGNAL:{
				if(send_at_command(AT_CHECK_SIGNAL, "OK", 2)){
    7548:	1e df       	rcall	.-452    	; 0x7386 <send_at_command>
    754a:	88 23       	and	r24, r24
    754c:	81 f1       	breq	.+96     	; 0x75ae <gsm_loop+0x150>
					gsm_state = CHECK_GSM;
    754e:	c5 e0       	ldi	r28, 0x05	; 5
    7550:	2e c0       	rjmp	.+92     	; 0x75ae <gsm_loop+0x150>
				_delay_ms(1000);
				break;
			}

			case CHECK_GSM:{
				if(send_at_command(AT_CHECK_GSM, "+CREG: 0,1", 2)){
    7552:	22 e0       	ldi	r18, 0x02	; 2
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	40 e0       	ldi	r20, 0x00	; 0
    7558:	50 e0       	ldi	r21, 0x00	; 0
    755a:	6b e8       	ldi	r22, 0x8B	; 139
    755c:	71 e0       	ldi	r23, 0x01	; 1
    755e:	83 e4       	ldi	r24, 0x43	; 67
    7560:	91 e0       	ldi	r25, 0x01	; 1
    7562:	11 df       	rcall	.-478    	; 0x7386 <send_at_command>
    7564:	88 23       	and	r24, r24
    7566:	19 f1       	breq	.+70     	; 0x75ae <gsm_loop+0x150>
					gsm_state = CHECK_GPRS;
    7568:	c4 e0       	ldi	r28, 0x04	; 4
    756a:	21 c0       	rjmp	.+66     	; 0x75ae <gsm_loop+0x150>
				_delay_ms(1000);
				break;
			}

			case CHECK_GPRS:{
				if(send_at_command(AT_CHECK_GPRS, "+CGATT: 1", 2)){
    756c:	22 e0       	ldi	r18, 0x02	; 2
    756e:	30 e0       	ldi	r19, 0x00	; 0
    7570:	40 e0       	ldi	r20, 0x00	; 0
    7572:	50 e0       	ldi	r21, 0x00	; 0
    7574:	66 e9       	ldi	r22, 0x96	; 150
    7576:	71 e0       	ldi	r23, 0x01	; 1
    7578:	87 e3       	ldi	r24, 0x37	; 55
    757a:	91 e0       	ldi	r25, 0x01	; 1
    757c:	04 df       	rcall	.-504    	; 0x7386 <send_at_command>
    757e:	88 23       	and	r24, r24
    7580:	b1 f0       	breq	.+44     	; 0x75ae <gsm_loop+0x150>
					gsm_state = SET_PPP_LINK;
    7582:	c6 e0       	ldi	r28, 0x06	; 6
    7584:	14 c0       	rjmp	.+40     	; 0x75ae <gsm_loop+0x150>
				_delay_ms(1000);
				break;
			}

			case SET_PPP_LINK:{
				if(send_at_command(AT_SET_PPP_LINK, "OK", 2)){
    7586:	22 e0       	ldi	r18, 0x02	; 2
    7588:	30 e0       	ldi	r19, 0x00	; 0
    758a:	40 e0       	ldi	r20, 0x00	; 0
    758c:	50 e0       	ldi	r21, 0x00	; 0
    758e:	68 eb       	ldi	r22, 0xB8	; 184
    7590:	71 e0       	ldi	r23, 0x01	; 1
    7592:	8b e2       	ldi	r24, 0x2B	; 43
    7594:	91 e0       	ldi	r25, 0x01	; 1
    7596:	08 c0       	rjmp	.+16     	; 0x75a8 <gsm_loop+0x14a>
				_delay_ms(1000);
				break;
			}

			case CHECK_PPP_LINK:{
				if(send_at_command(AT_CHECK_PPP_LINK, "+XIIC:    1,", 2)){
    7598:	22 e0       	ldi	r18, 0x02	; 2
    759a:	30 e0       	ldi	r19, 0x00	; 0
    759c:	40 e0       	ldi	r20, 0x00	; 0
    759e:	50 e0       	ldi	r21, 0x00	; 0
    75a0:	60 ea       	ldi	r22, 0xA0	; 160
    75a2:	71 e0       	ldi	r23, 0x01	; 1
    75a4:	80 e2       	ldi	r24, 0x20	; 32
    75a6:	91 e0       	ldi	r25, 0x01	; 1
    75a8:	ee de       	rcall	.-548    	; 0x7386 <send_at_command>
    75aa:	81 11       	cpse	r24, r1
					gsm_state = CONNECT_TCP;
    75ac:	c8 e0       	ldi	r28, 0x08	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    75ae:	2f ef       	ldi	r18, 0xFF	; 255
    75b0:	89 e6       	ldi	r24, 0x69	; 105
    75b2:	98 e1       	ldi	r25, 0x18	; 24
    75b4:	21 50       	subi	r18, 0x01	; 1
    75b6:	80 40       	sbci	r24, 0x00	; 0
    75b8:	90 40       	sbci	r25, 0x00	; 0
    75ba:	e1 f7       	brne	.-8      	; 0x75b4 <gsm_loop+0x156>
    75bc:	00 c0       	rjmp	.+0      	; 0x75be <gsm_loop+0x160>
    75be:	00 00       	nop
    75c0:	60 cf       	rjmp	.-320    	; 0x7482 <gsm_loop+0x24>
				_delay_ms(1000);
				break;
			}

			case CONNECT_TCP:{
				if(send_at_command(AT_TCP_TRANS, "+TCPTRANS: OK", 5)){
    75c2:	25 e0       	ldi	r18, 0x05	; 5
    75c4:	30 e0       	ldi	r19, 0x00	; 0
    75c6:	40 e0       	ldi	r20, 0x00	; 0
    75c8:	50 e0       	ldi	r21, 0x00	; 0
    75ca:	6d ea       	ldi	r22, 0xAD	; 173
    75cc:	71 e0       	ldi	r23, 0x01	; 1
    75ce:	80 e0       	ldi	r24, 0x00	; 0
    75d0:	91 e0       	ldi	r25, 0x01	; 1
    75d2:	d9 de       	rcall	.-590    	; 0x7386 <send_at_command>
    75d4:	81 11       	cpse	r24, r1
    75d6:	2a c0       	rjmp	.+84     	; 0x762c <gsm_loop+0x1ce>
	uint8_t high_level	 	= eeprom_read_byte(GSM_REG_PIN_ON_LOGIC_ADDR);
	change_pin_state(port_addr, port_pin, high_level);	
}

void turn_modem_off(void){
	uint8_t * port_addr 	= eeprom_read_byte(GSM_REG_PORT_ADDR);
    75d8:	85 e0       	ldi	r24, 0x05	; 5
    75da:	90 e0       	ldi	r25, 0x00	; 0
    75dc:	2f d0       	rcall	.+94     	; 0x763c <eeprom_read_byte>
    75de:	ec 01       	movw	r28, r24
	uint8_t port_pin	 	= eeprom_read_byte(GSM_REG_PIN_ADDR);
    75e0:	86 e0       	ldi	r24, 0x06	; 6
    75e2:	90 e0       	ldi	r25, 0x00	; 0
    75e4:	2b d0       	rcall	.+86     	; 0x763c <eeprom_read_byte>
    75e6:	7c 01       	movw	r14, r24
	uint8_t high_level	 	= eeprom_read_byte(GSM_REG_PIN_ON_LOGIC_ADDR);
    75e8:	87 e0       	ldi	r24, 0x07	; 7
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	27 d0       	rcall	.+78     	; 0x763c <eeprom_read_byte>
//NOTE: A unsigned long holds values from 0 to 4,294,967,295 (2^32 - 1). It will roll over to 0 after reaching its maximum value.


void change_pin_state(uint8_t *port, uint8_t pin, uint8_t value){
    unsigned char * ddr = port - 1;
    *ddr |= (1 << pin);
    75ee:	98 01       	movw	r18, r16
    75f0:	01 c0       	rjmp	.+2      	; 0x75f4 <gsm_loop+0x196>
    75f2:	22 0f       	add	r18, r18
    75f4:	ea 94       	dec	r14
    75f6:	ea f7       	brpl	.-6      	; 0x75f2 <gsm_loop+0x194>
    75f8:	fe 01       	movw	r30, r28
    75fa:	92 91       	ld	r25, -Z
    75fc:	92 2b       	or	r25, r18
    75fe:	90 83       	st	Z, r25
    7600:	98 81       	ld	r25, Y
    if(value){
    7602:	81 11       	cpse	r24, r1
    7604:	02 c0       	rjmp	.+4      	; 0x760a <gsm_loop+0x1ac>
      *port |= (1 << pin);//make pin 13 high and power on the led
    7606:	29 2b       	or	r18, r25
    7608:	02 c0       	rjmp	.+4      	; 0x760e <gsm_loop+0x1b0>
    }
    else{
      *port &= ~(1 <<pin);//make pin 13 low and power off the led
    760a:	20 95       	com	r18
    760c:	29 23       	and	r18, r25
    760e:	28 83       	st	Y, r18
    7610:	2f ef       	ldi	r18, 0xFF	; 255
    7612:	89 e6       	ldi	r24, 0x69	; 105
    7614:	98 e1       	ldi	r25, 0x18	; 24
    7616:	21 50       	subi	r18, 0x01	; 1
    7618:	80 40       	sbci	r24, 0x00	; 0
    761a:	90 40       	sbci	r25, 0x00	; 0
    761c:	e1 f7       	brne	.-8      	; 0x7616 <gsm_loop+0x1b8>
    761e:	00 c0       	rjmp	.+0      	; 0x7620 <gsm_loop+0x1c2>
    7620:	00 00       	nop
					return OK;
				}
				else{
					turn_modem_off();
					_delay_ms(1000);
					gsm_state = INITIAL;
    7622:	c0 e0       	ldi	r28, 0x00	; 0
    7624:	31 cf       	rjmp	.-414    	; 0x7488 <gsm_loop+0x2a>
    7626:	a8 95       	wdr
			}
		}
	}
	
	watchdogReset();
	return NOT_OK;
    7628:	80 e0       	ldi	r24, 0x00	; 0
    762a:	01 c0       	rjmp	.+2      	; 0x762e <gsm_loop+0x1d0>
			}

			case CONNECT_TCP:{
				if(send_at_command(AT_TCP_TRANS, "+TCPTRANS: OK", 5)){
					gsm_state = IDLE;
					return OK;
    762c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	watchdogReset();
	return NOT_OK;
}
    762e:	df 91       	pop	r29
    7630:	cf 91       	pop	r28
    7632:	1f 91       	pop	r17
    7634:	0f 91       	pop	r16
    7636:	ff 90       	pop	r15
    7638:	ef 90       	pop	r14
    763a:	08 95       	ret

0000763c <eeprom_read_byte>:
    763c:	f9 99       	sbic	0x1f, 1	; 31
    763e:	fe cf       	rjmp	.-4      	; 0x763c <eeprom_read_byte>
    7640:	92 bd       	out	0x22, r25	; 34
    7642:	81 bd       	out	0x21, r24	; 33
    7644:	f8 9a       	sbi	0x1f, 0	; 31
    7646:	99 27       	eor	r25, r25
    7648:	80 b5       	in	r24, 0x20	; 32
    764a:	08 95       	ret

0000764c <eeprom_write_byte>:
    764c:	26 2f       	mov	r18, r22

0000764e <eeprom_write_r18>:
    764e:	f9 99       	sbic	0x1f, 1	; 31
    7650:	fe cf       	rjmp	.-4      	; 0x764e <eeprom_write_r18>
    7652:	1f ba       	out	0x1f, r1	; 31
    7654:	92 bd       	out	0x22, r25	; 34
    7656:	81 bd       	out	0x21, r24	; 33
    7658:	20 bd       	out	0x20, r18	; 32
    765a:	0f b6       	in	r0, 0x3f	; 63
    765c:	f8 94       	cli
    765e:	fa 9a       	sbi	0x1f, 2	; 31
    7660:	f9 9a       	sbi	0x1f, 1	; 31
    7662:	0f be       	out	0x3f, r0	; 63
    7664:	01 96       	adiw	r24, 0x01	; 1
    7666:	08 95       	ret

00007668 <strstr>:
    7668:	fb 01       	movw	r30, r22
    766a:	51 91       	ld	r21, Z+
    766c:	55 23       	and	r21, r21
    766e:	a9 f0       	breq	.+42     	; 0x769a <strstr+0x32>
    7670:	bf 01       	movw	r22, r30
    7672:	dc 01       	movw	r26, r24
    7674:	4d 91       	ld	r20, X+
    7676:	45 17       	cp	r20, r21
    7678:	41 11       	cpse	r20, r1
    767a:	e1 f7       	brne	.-8      	; 0x7674 <strstr+0xc>
    767c:	59 f4       	brne	.+22     	; 0x7694 <strstr+0x2c>
    767e:	cd 01       	movw	r24, r26
    7680:	01 90       	ld	r0, Z+
    7682:	00 20       	and	r0, r0
    7684:	49 f0       	breq	.+18     	; 0x7698 <strstr+0x30>
    7686:	4d 91       	ld	r20, X+
    7688:	40 15       	cp	r20, r0
    768a:	41 11       	cpse	r20, r1
    768c:	c9 f3       	breq	.-14     	; 0x7680 <strstr+0x18>
    768e:	fb 01       	movw	r30, r22
    7690:	41 11       	cpse	r20, r1
    7692:	ef cf       	rjmp	.-34     	; 0x7672 <strstr+0xa>
    7694:	81 e0       	ldi	r24, 0x01	; 1
    7696:	90 e0       	ldi	r25, 0x00	; 0
    7698:	01 97       	sbiw	r24, 0x01	; 1
    769a:	08 95       	ret

0000769c <_exit>:
    769c:	f8 94       	cli

0000769e <__stop_program>:
    769e:	ff cf       	rjmp	.-2      	; 0x769e <__stop_program>
